<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>summer21 - Tag - Haihao Sun</title>
        <link>http://tribbiannisun.github.io/tags/summer21/</link>
        <description>summer21 - Tag - Haihao Sun</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Wed, 28 Jul 2021 00:00:08 &#43;0800</lastBuildDate><atom:link href="http://tribbiannisun.github.io/tags/summer21/" rel="self" type="application/rss+xml" /><item>
    <title>Leetcode_1493 Longest Subarray of 1&#39;s After Deleting One Element</title>
    <link>http://tribbiannisun.github.io/leetcode_1493/</link>
    <pubDate>Wed, 28 Jul 2021 00:00:08 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://tribbiannisun.github.io/leetcode_1493/</guid>
    <description><![CDATA[Problem Solution Leetcode 1493 Longest Subarray of 1&rsquo;s After Deleting One Element 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32  class Solution { public: int longestSubarray(vector&lt;int&gt;&amp; nums) { int s = 0, n = nums.size(); for(int num : nums) s += num; if(s == n) return s - 1; int counter = 0; int ret = 0; for(int i = 0, j = 0; i &lt; n; i++){ // added nums[i] to the sliding window  if(nums[i] == 0) counter += 1; // while loop to make sure that the sliding window is valid  while(j &lt;= i and counter &gt; 1){ if(nums[j] == 0){ counter -= 1; } j += 1; } // update the result  ret = max(ret, i - j + 1 - counter); } return ret; } };   ]]></description>
</item><item>
    <title>Leetcode_219. Contains Duplicate II</title>
    <link>http://tribbiannisun.github.io/leetcode_219/</link>
    <pubDate>Tue, 27 Jul 2021 22:27:46 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://tribbiannisun.github.io/leetcode_219/</guid>
    <description><![CDATA[Problem Solution Leetcode 219. Contains Duplicate II 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  class Solution { public: bool containsNearbyDuplicate(vector&lt;int&gt;&amp; nums, int k) { int n = nums.size(); set&lt;int&gt; s; for(int i = 0; i &lt; min(n, k + 1); i++){ if(s.count(nums[i])) return true; s.insert(nums[i]); } for(int i = k + 1; i &lt; n; i++){ s.erase(nums[i - k - 1]); if(s.]]></description>
</item><item>
    <title>Leetcode_643 Maximum Average Subarray I</title>
    <link>http://tribbiannisun.github.io/leetcode_643/</link>
    <pubDate>Tue, 27 Jul 2021 22:13:03 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://tribbiannisun.github.io/leetcode_643/</guid>
    <description><![CDATA[Problem Solution Leetcode 643. Maximum Average Subarray I 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  class Solution { public: double findMaxAverage(vector&lt;int&gt;&amp; nums, int k) { int n = nums.size(); double cur = 0; double max_sum = -2e9; for(int i = 0; i &lt; k; i++){ cur += nums[i]; } for(int i = k; i &lt; n; i++){ max_sum = max(max_sum, cur); cur -= nums[i - k]; cur += nums[i]; } max_sum = max(max_sum, cur); return max_sum / k; } };   ]]></description>
</item><item>
    <title>Leetcode_1876 Substrings of Size Three with Distinct Characters</title>
    <link>http://tribbiannisun.github.io/leetcode_1876/</link>
    <pubDate>Tue, 27 Jul 2021 22:12:43 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://tribbiannisun.github.io/leetcode_1876/</guid>
    <description><![CDATA[Problem Solution Leetcode 1876. Substrings of Size Three with Distinct Characters 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  class Solution { public: int countGoodSubstrings(string s) { int n = s.size(); if(n &lt; 3) return 0; int freq[30]; memset(freq, 0, sizeof freq); int counter = 0; int ret = 0; for(int i = 0; i &lt; 3; i+=1){ if(!]]></description>
</item><item>
    <title>Leetcode_18 4sum</title>
    <link>http://tribbiannisun.github.io/leetcode_18/</link>
    <pubDate>Fri, 16 Jul 2021 23:20:54 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://tribbiannisun.github.io/leetcode_18/</guid>
    <description><![CDATA[<p>Use <strong>data-structure</strong> to solve Leetcode 51 - N-Queens.</p>]]></description>
</item><item>
    <title>Leetcode_1192 Critical Connections in a Network</title>
    <link>http://tribbiannisun.github.io/leetcode_1192/</link>
    <pubDate>Thu, 15 Jul 2021 23:05:58 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://tribbiannisun.github.io/leetcode_1192/</guid>
    <description><![CDATA[<p>Use <strong>graph, Tarjan</strong> to solve Leetcode 1192 Critical Connections in a Network</p>]]></description>
</item><item>
    <title>Leetcode_1349 Maximum Students Taking Exam</title>
    <link>http://tribbiannisun.github.io/leetcode_1349/</link>
    <pubDate>Thu, 15 Jul 2021 22:49:14 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://tribbiannisun.github.io/leetcode_1349/</guid>
    <description><![CDATA[<p>Use <strong>bitmask, dp</strong> to solve Leetcode 1349. Maximum Students Taking Exam</p>]]></description>
</item><item>
    <title>Leetcode_687 Longest Univalue Path</title>
    <link>http://tribbiannisun.github.io/leetcode_687/</link>
    <pubDate>Thu, 15 Jul 2021 22:49:05 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://tribbiannisun.github.io/leetcode_687/</guid>
    <description><![CDATA[<p>Use <strong>dfs</strong> to solve Leetcode 687. Longest Univalue Path</p>]]></description>
</item><item>
    <title>Leetcode 1010 Pairs of Songs With Total Durations Divisible by 60</title>
    <link>http://tribbiannisun.github.io/leetcode_1010/</link>
    <pubDate>Thu, 15 Jul 2021 22:48:48 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://tribbiannisun.github.io/leetcode_1010/</guid>
    <description><![CDATA[<p>Use <strong>data-structure</strong> to solve Leetcode 1010. Pairs of Songs With Total Durations Divisible by 60</p>]]></description>
</item><item>
    <title>Leetcode_611 Valid Triangle Number</title>
    <link>http://tribbiannisun.github.io/leetcode_611/</link>
    <pubDate>Thu, 15 Jul 2021 22:48:39 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://tribbiannisun.github.io/leetcode_611/</guid>
    <description><![CDATA[<p>Use <strong>binary-index-tree, two-pointer</strong> to solve Leetcode_611 Valid Triangle Number</p>]]></description>
</item></channel>
</rss>
