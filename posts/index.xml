<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>All Posts - Haihao Sun</title>
        <link>http://tribbiannisun.github.io/posts/</link>
        <description>All Posts | Haihao Sun</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sat, 29 May 2021 12:04:08 &#43;0800</lastBuildDate><atom:link href="http://tribbiannisun.github.io/posts/" rel="self" type="application/rss+xml" /><item>
    <title>Leetcode_542 01 Matrix</title>
    <link>http://tribbiannisun.github.io/leetcode_542/</link>
    <pubDate>Sat, 29 May 2021 12:04:08 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://tribbiannisun.github.io/leetcode_542/</guid>
    <description><![CDATA[Problem Description Leetcode 542  Given an m x n binary matrix mat, return the distance of the nearest 0 for each cell.
The distance between two adjacent cells is 1.
Example Test Cases Leetcode 542  
1 2  Input: mat = [[0,0,0],[0,1,0],[0,0,0]] Output: [[0,0,0],[0,1,0],[0,0,0]]   Problem Solution Leetcode 542 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39  typedef pair&lt;int,int&gt; PII; class Solution { public: int n, m; int dx[4] = {0, 0, -1, 1}; int dy[4] = {1, -1, 0, 0}; vector&lt;vector&lt;int&gt;&gt; updateMatrix(vector&lt;vector&lt;int&gt;&gt;&amp; mat) { n = mat.]]></description>
</item><item>
    <title>Leetcode_752 Open the Lock</title>
    <link>http://tribbiannisun.github.io/leetcode_752/</link>
    <pubDate>Tue, 25 May 2021 23:28:57 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://tribbiannisun.github.io/leetcode_752/</guid>
    <description><![CDATA[Problem Description Leetcode 752  You have a lock in front of you with 4 circular wheels. Each wheel has 10 slots: '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'. The wheels can rotate freely and wrap around: for example we can turn '9' to be '0', or '0' to be '9'. Each move consists of turning one wheel one slot. The lock initially starts at &lsquo;0000&rsquo;, a string representing the state of the 4 wheels.]]></description>
</item><item>
    <title>Leetcode_934 - Shortest Bridge</title>
    <link>http://tribbiannisun.github.io/leetcode_934/</link>
    <pubDate>Mon, 24 May 2021 23:16:32 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://tribbiannisun.github.io/leetcode_934/</guid>
    <description><![CDATA[<p>Use <strong>BFS 最短路模型</strong> to solve Leetcode 934 - Shortest Bridge</p>]]></description>
</item><item>
    <title>算法总结_BFS总结</title>
    <link>http://tribbiannisun.github.io/%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93_bfs%E6%80%BB%E7%BB%93/</link>
    <pubDate>Sun, 23 May 2021 22:27:20 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://tribbiannisun.github.io/%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93_bfs%E6%80%BB%E7%BB%93/</guid>
    <description><![CDATA[<p>This article reviews the BFS problems and break them into smaller topics and models.</p>]]></description>
</item><item>
    <title>Leetcode_124 Binary Tree Maximum Path Sum</title>
    <link>http://tribbiannisun.github.io/leetcode_124/</link>
    <pubDate>Sun, 16 May 2021 22:35:22 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://tribbiannisun.github.io/leetcode_124/</guid>
    <description><![CDATA[<p>Use <strong>DP On Tree</strong> to solve Leetcode_124 Binary Tree Maximum Path Sum</p>]]></description>
</item><item>
    <title>Leetcode_543 Diameter of Binary Tree</title>
    <link>http://tribbiannisun.github.io/leetcode_543/</link>
    <pubDate>Sun, 16 May 2021 22:34:58 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://tribbiannisun.github.io/leetcode_543/</guid>
    <description><![CDATA[<p>Use <strong>DP On Tree</strong> to solve Leetcode_543 Diameter of Binary Tree</p>]]></description>
</item><item>
    <title>Leetcode_968 Binary Tree Cameras</title>
    <link>http://tribbiannisun.github.io/leetcode_968/</link>
    <pubDate>Sat, 15 May 2021 22:14:08 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://tribbiannisun.github.io/leetcode_968/</guid>
    <description><![CDATA[<p>Use <strong>DP-On-Tree</strong> to solve Leetcode_968 Binary Tree Cameras</p>]]></description>
</item><item>
    <title>Leetcode_354 Russian Doll Envelopes</title>
    <link>http://tribbiannisun.github.io/leetcode_354/</link>
    <pubDate>Fri, 14 May 2021 14:32:02 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://tribbiannisun.github.io/leetcode_354/</guid>
    <description><![CDATA[<p>Use <strong>DP-LIS</strong> to solve Leetcode_354 Russian Doll Envelopes</p>]]></description>
</item><item>
    <title>Leetcode_673. Number of Longest Increasing Subsequence</title>
    <link>http://tribbiannisun.github.io/leetcode_673/</link>
    <pubDate>Fri, 14 May 2021 14:31:46 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://tribbiannisun.github.io/leetcode_673/</guid>
    <description><![CDATA[<p>Use <strong>DP LIS</strong> to solve Leetcode_673. Number of Longest Increasing Subsequence</p>]]></description>
</item><item>
    <title>Leetcode_300 Longest Increasing Subsequence</title>
    <link>http://tribbiannisun.github.io/leetcode_300/</link>
    <pubDate>Fri, 14 May 2021 14:11:52 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://tribbiannisun.github.io/leetcode_300/</guid>
    <description><![CDATA[<p>Use <strong>DP LIS</strong> to solve Leetcode_300 Longest Increasing Subsequence.</p>]]></description>
</item></channel>
</rss>
