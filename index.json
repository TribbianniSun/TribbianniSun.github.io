[{"categories":["Data Structure"],"content":"This article reviews union find.","date":"2021-01-12","objectID":"/union_find/","tags":["data structure review"],"title":"union_find review","uri":"/union_find/"},{"categories":["Data Structure"],"content":"This article reviews union find (AKA disjoint set). Union Find | Disjoint Set ","date":"2021-01-12","objectID":"/union_find/:0:0","tags":["data structure review"],"title":"union_find review","uri":"/union_find/"},{"categories":["Data Structure"],"content":"Semantics This data structure stores the collection of disjoint(non-overlapping) sets(groups). find(p): find the leader of group that contains p union(p, q): merge two groups ","date":"2021-01-12","objectID":"/union_find/:0:1","tags":["data structure review"],"title":"union_find review","uri":"/union_find/"},{"categories":["Data Structure"],"content":"Implementation class UnionFind(): def __init__(self): self.parents = {} self.sizes = {} self.n_sets = 0 def contains(self, i): return i in self.parents def insert(self, i): if self.contains(i): return else: self.parents[i] = i self.sizes[i] = 1 self.n_sets += 1 def find(self, i): while i != self.parents[i]: self.parents[i] = self.find(self.parents[i]) i = self.parents[i] return self.parents[i] def union(self, p, q): root_p, root_q = self.find(p), self.find(q) if root_p == root_q: return else: # we merge the small group into the large group small, large = sorted([root_p, root_q], key=lambda x: self.sizes[x]) self.parents[small] = large # fix the size, and decrease the n_sets since we form two groups into a larger group self.sizes[big] += self.sizes[small] self.n_sets -= 1 ","date":"2021-01-12","objectID":"/union_find/:0:2","tags":["data structure review"],"title":"union_find review","uri":"/union_find/"},{"categories":["Data Structure"],"content":"Efficienty Analysis O(n) in memory, O(1) for union and look up in amortized analysis ","date":"2021-01-12","objectID":"/union_find/:0:3","tags":["data structure review"],"title":"union_find review","uri":"/union_find/"},{"categories":["Data Structure"],"content":"Remarks Check whether two elements belong to the same group. To find connected components in graph (usually undirected) Speed up implementation of kruskal’s algorithm ","date":"2021-01-12","objectID":"/union_find/:0:4","tags":["data structure review"],"title":"union_find review","uri":"/union_find/"},{"categories":null,"content":" Welcome to  Haihao Sun’s field! Self Introduction Haihao SunTravelling \" Travelling Hi there! I am Haihao Sun, and my hobbies come and go. I enjoy travelling, playing Go, playing pokemon, and developing(AKA coding). I was born in Nanjing, and I currently live in San Diego . Skills JavaScript SQL C/C++  Java Python Extended Links Linkedin Blog Version I Github ","date":"2019-08-02","objectID":"/about/:0:0","tags":null,"title":"About Page","uri":"/about/"}]